#!/usr/bin/perl

use strict;
use warnings;


my %numbers = (1 => (" .----------------. ",
"| .--------------. |",
"| |     __       | |",
"| |    /  |      | |",
"| |    `| |      | |",
"| |     | |      | |",
"| |    _| |_     | |",
"| |   |_____|    | |",
"| |              | |",
"| '--------------' |",
" '----------------' "),
2 => ( " .----------------. ",
"| .--------------. |",
"| |    _____     | |",
"| |   / ___ `.   | |",
"| |  |_/___) |   | |",
"| |   .'____.'   | |",
"| |  / /____     | |",
"| |  |_______|   | |",
"| |              | |",
"| '--------------' |",
" '----------------' "),  
3 => ( " .----------------. ",
"| .--------------. |",
"| |    ______    | |",
"| |   / ____ `.  | |",
"| |   `'  __) |  | |",
"| |   _  |__ '.  | |",
"| |   | \\____) | | |",
"| |    \\______.' | |",
"| |              | |",
"| '--------------' |",
" '----------------' "),
4 => ( " .----------------. ",
"| .--------------. |",
"| |   _    _     | |",
"| |  | |  | |    | |",
"| |  | |__| |_   | |",
"| |  |____   _|  | |",
"| |      _| |_   | |",
"| |     |_____|  | |",
"| |              | |",
"| '--------------' |",
" '----------------' "),
5 => ( " .----------------. ",
"| .--------------. |",
"| |   _______    | |",
"| |  |  _____|   | |",
"| |  | |____     | |",
"| |  '_.____''.  | |",
"| |  | \\____)  | | |",
"| |   \\______.'  | |",
"| |              | |",
"| '--------------' |",
" '----------------' "),
6 => ( " .----------------. ",
"| .--------------. |",
"| |    ______    | |",
"| |  .' ____ \\   | |",
"| |  | |____\\_|  | |",
"| |  | '____`'.  | |",
"| |  | (____) |  | |",
"| |  '.______.'  | |",
"| |              | |",
"| '--------------' |",
" '----------------' "),
7 => ( " .----------------. ",
"| .--------------. |",
"| |   _______    | |",
"| |  |  ___  |   | |",
"| |  |_/  / /    | |",
"| |      / /     | |",
"| |     / /      | |",
"| |    /_/       | |",
"| |              | |",
"| '--------------' |",
" '----------------' "),
8 => ( " .----------------. ",
"| .--------------. |",
"| |     ____     | |",
"| |   .' __ '.   | |",
"| |   | (__) |   | |",
"| |   .`____'.   | |",
"| |  | (____) |  | |",
"| |  `.______.'  | |",
"| |              | |",
"| '--------------' |",
" '----------------' "),
9 => ( " .----------------. ",
"| .--------------. |",
"| |    ______    | |",
"| |  .' ____ '.  | |",
"| |  | (____) |  | |",
"| |  '_.____. |  | |",
"| |  | \\____| |  | |",
"| |   \\______,'  | |",
"| |              | |",
"| '--------------' |",
" '----------------' "),
0 => ( " .----------------. ",
"| .--------------. |",
"| |     ____     | |",
"| |   .'    '.   | |",
"| |  |  .--.  |  | |",
"| |  | |    | |  | |",
"| |  |  `--'  |  | |",
"| |   '.____.'   | |",
"| |              | |",
"| '--------------' |",
" '----------------' "),
10 => ("         ",
  "         ",
  "         ",
  "    _    ",
  "   (_)   ",
  "    _    ",
  "   (_)   ",
  "         ",
  "         ",
  "         ",
  "         ") 
 );

# Send control sequences to set up the terminal
#print "\e[?1049h"; # Enable alternate screen buffer
  #print "\e[?25l";   # Hide cursor
# Display a simple interface
#print "\e[H";      # Move cursor to top left corner
=pod
  sub split_digit {
    my @time;
    my @nums = @_;
    foreach my $t (@nums){
      my @digits = split(//, $t);
      foreach my $digit (@digits){
        if (exists @numbers{$digit}){
          push @time, @numbers{$digit};
        } 
        else {
          print $digit, "unknown";
        }
      }
      push @time, @numbers{10};
      }
    }
    return @time;
  }
  sub print_time {
    my @time = @_;
    my $len = scalar @time[0];
    for my $row (0 .. $len-1){
      for my $num (0 .. $#time){
        print "$time[$num][$row]";
      }
    }

  }
  my ($sec, $min, $hour) = localtime(time);
  my @time = ($hour, $min, $sec);
  my @curr = print_time(split_digit(@time));

=cut


print "Welcome to My Perl App\n";
print "Press q to quit\n\n";
my $input = '';
while ($input ne 'q') {
  my $len = scalar $numbers{1};
  
  my @number = @numbers{1};
  for my $row (0 .. $len-1){
      my $n = $number[$row];
      print "$n";
      print "\n";
  }
  print "Enter something: ";
  $input = <STDIN>;
  chomp $input;
  print "You entered: $input\n";
  sleep(1);
  next;
}

# Restore terminal to its original state
#print "\e[?25h";   # Show cursor
  #print "\e[?1049l"; # Disable alternate screen buffer


    
